import HexWriter from 'dimensions/packets/hexwriter';
import { a2hex, getCorrectHex, getPacketLengthFromData } from 'dimensions/utils';
import Color from 'dimensions/color';
import NetworkText from 'dimensions/packets/networktext';

/**
 * Uses the hex writer to write packets readable by Terraria Servers
 */
class PacketWriter extends HexWriter {
    constructor() {
        super();
        this._data = "0200";
    }

    /**
     * Updates the packet type
     * 
     * @param type The packet type to set this packet to
     */
    public setType(type: number): PacketWriter {
        let typeHex: string = (type).toString(16);
        // Length must be even
        if (typeHex.length % 2 !== 0) {
            typeHex = "0" + typeHex;
        }

        this._data = this._data.substr(0, 4) + typeHex + this._data.substr(6);
        this.updateLength();
        return this;
    }

    /**
     * Packs a string into the packet, appending the data to the end of the payload
     * 
     * @param str The string to append to the end of this packet
     */
    public packString(str: string): PacketWriter {
        super.packString(str);
        this.updateLength();
        return this;
    }

    /**
     * Packs network text into the packet, appending the data to
     * the end of the payload
     * 
     * @param text The text to pack as network text
     * @param mode The mode (0 = Literal, 1 = Formattable, 2 = LocalizationKey)
     * @return This writer
     */
    public packNetworkText(networkText: NetworkText): HexWriter {
      super.packNetworkText(networkText);
      this.updateLength();
      return this;
    }

    /**
     * Packs hex data into the packet, appending the data to the end of the payload
     * 
     * @param hex The hex string to append to the end of this packet
     */
    public packHex(hex: string): PacketWriter {
        super.packHex(hex);
        this.updateLength();
        return this;
    }

    /**
     * Packs a byte into the packet, appending the data to the end of the payload
     * 
     * @param byte The byte to append to the end of this packet
     */
    public packByte(byte: number): PacketWriter {
        super.packByte(byte);
        this.updateLength();
        return this;
    }

    /**
     * Packs a color object into the packet, using three bytes in order RGB, appending
     * the data to the end of the payload.
     * 
     * @param color The color object to convert and append to the end of this packet
     */
    public packColor(color: Color): PacketWriter {
        super.packColor(color);
        return this;
    }

    /**
     * Packs an unsigned int16 into the packet, appending the data to the end of the payload
     * 
     * @param uint16 The unsigned int16 to append to the end of this packet
     */
    public packUInt16(uint16: number): PacketWriter {
        super.packUInt16(uint16);
        this.updateLength();
        return this;
    }

    /**
     * Packs an signed int16 into the packet, appending the data to the end of the payload
     * 
     * @param int16 The unsigned int16 to append to the end of this packet
     */
    public packInt16(int16: number): PacketWriter {
        super.packInt16(int16);
        this.updateLength();
        return this;
    }
    
    /**
     * Packs an unsigned int32 into the packet, appending the data to the end of the payload
     * 
     * @param uint32 The unsigned int32 to append to the end of this packet
     */
    public packUInt32(uint32: number): PacketWriter {
        super.packUInt32(uint32);
        this.updateLength();
        return this;
    }

    /**
     * Packs an signed int32 into the packet, appending the data to the end of the payload
     * 
     * @param int32 The signed int32 to append to the end of this packet
     */
    public packInt32(int32: number): PacketWriter {
        super.packInt32(int32);
        this.updateLength();
        return this;
    }

    /**
     * Writes a uint64 to the hex data
     * 
     * @param uint64 The uint64 to pack as hex
     * @return This writer
     */
    public packUInt64(uint64: number): PacketWriter {
        super.packUInt64(uint64);
        this.updateLength();
        return this;
    }

    /**
     * Packs a single into the packet, appending the data to the end of the payload
     * 
     * @param single The single to append to the end of this packet
     */
    public packSingle(single: number): PacketWriter {
        super.packSingle(single);
        this.updateLength();
        return this;
    }

    /**
     * Checks the length of the packet and updates the length written into the packet
     */
    protected updateLength(): void {
        this._data = getPacketLengthFromData(this._data.substr(4)) + this._data.substr(4);
    }
}

export default PacketWriter;